/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Mat {
  export type UserStruct = {
    lastCheckIn: BigNumberish;
    balance: BigNumberish;
    initialized: boolean;
  };

  export type UserStructOutput = [
    lastCheckIn: bigint,
    balance: bigint,
    initialized: boolean
  ] & { lastCheckIn: bigint; balance: bigint; initialized: boolean };
}

export interface MatInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkIn"
      | "createUser"
      | "getUser"
      | "name"
      | "owner"
      | "symbol"
      | "users"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CheckedIn" | "NewUser"): EventFragment;

  encodeFunctionData(
    functionFragment: "checkIn",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export namespace CheckedInEvent {
  export type InputTuple = [userAddress: AddressLike, balance: BigNumberish];
  export type OutputTuple = [userAddress: string, balance: bigint];
  export interface OutputObject {
    userAddress: string;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewUserEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Mat extends BaseContract {
  connect(runner?: ContractRunner | null): Mat;
  waitForDeployment(): Promise<this>;

  interface: MatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkIn: TypedContractMethod<
    [userAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  createUser: TypedContractMethod<
    [userAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getUser: TypedContractMethod<
    [userAddress: AddressLike],
    [Mat.UserStructOutput],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        lastCheckIn: bigint;
        balance: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkIn"
  ): TypedContractMethod<[userAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createUser"
  ): TypedContractMethod<[userAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [userAddress: AddressLike],
    [Mat.UserStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        lastCheckIn: bigint;
        balance: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CheckedIn"
  ): TypedContractEvent<
    CheckedInEvent.InputTuple,
    CheckedInEvent.OutputTuple,
    CheckedInEvent.OutputObject
  >;
  getEvent(
    key: "NewUser"
  ): TypedContractEvent<
    NewUserEvent.InputTuple,
    NewUserEvent.OutputTuple,
    NewUserEvent.OutputObject
  >;

  filters: {
    "CheckedIn(address,uint256)": TypedContractEvent<
      CheckedInEvent.InputTuple,
      CheckedInEvent.OutputTuple,
      CheckedInEvent.OutputObject
    >;
    CheckedIn: TypedContractEvent<
      CheckedInEvent.InputTuple,
      CheckedInEvent.OutputTuple,
      CheckedInEvent.OutputObject
    >;

    "NewUser(address)": TypedContractEvent<
      NewUserEvent.InputTuple,
      NewUserEvent.OutputTuple,
      NewUserEvent.OutputObject
    >;
    NewUser: TypedContractEvent<
      NewUserEvent.InputTuple,
      NewUserEvent.OutputTuple,
      NewUserEvent.OutputObject
    >;
  };
}
